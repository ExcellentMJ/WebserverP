<div class="my-5">
  <h1 class="text-center mb-5">게시판</h1>
  <div class="text-end">
    <button id="btn-insert" class="btn btn-primary">글쓰기</button>
  </div>
  <div>게시글 수:<span id="total"></span></div>
  <hr />
  <div id="div_posts"></div>
  <div id="pagination" class="pagination justify-content-center mt-5">
  </div>
</div>
<script id="temp_posts" type="x-handlebars-templates">
  <table class="table table-striped table-hover table-bordered">
        <tr class="text-center">
            <td></td><td>제목</td><td>작성자</td><td>작성일</td>
    
        </tr>
      {{#each .}}
      <tr>
          <td>{{index}}</td>
          <td><a href="/posts/read?id={{id}}">{{title}}</a></td>
          <td>{{email}}</td>
          <td>{{date}}</td>
      </tr>
      {{/each}}
  </table>
</script>
<script type="module">
  // Firestore 사용
  import { app } from "/javascripts/firebaseInit.js";
  import {
    getFirestore,
    collection,
    query,
    orderBy,
    getDocs,
    where,
    doc,
  } from "https://www.gstatic.com/firebasejs/10.4.0/firebase-firestore.js";
  const db = getFirestore(app);
  const email = sessionStorage.getItem("email");
  let total = 0;
  let size = 3;
  let last = 1;
  let page = 1;

  $('#pagination').twbsPagination({
    totalPages: 10, //총 페이지 번호 수
    visiblePages: 5, // 하단에서 한 번에 보여 지는 페이지 번호 수
    startPage: 1, // 시작 시 표시되는 현재 페이지
    initiateStartPageClick: false, // 플러그인이 시작 시 페이지 버튼 클릭 여부 (default : true) 
    first: '<<', // 페이지네이션 버튼 중 처음으로 돌아가는 버튼에 쓰여 있는 텍스트
    prev: '<', // 이전 페이지 버튼에 쓰여 있는 텍스트
    next: '>', // 다음 페이지 버튼에 쓰여 있는 텍스트
    last: '>>', // 페이지네이션 버튼 중 마지막으로 가는 버튼에 쓰여 있는 텍스트
    onPageClick: function (event, clickPage) {
      page = clickPage;
      getPosts();
    }
  });
  getPosts();
  async function getPosts() {
    const q = query(collection(db, "posts"), orderBy("date", "desc"));
    const snapshot = await getDocs(q);
    $("#total").html(snapshot.docs.length);
    if (total != snapshot.docs.length) {
      total = snapshot.docs.length;
      const totalPages = Math.ceil(total / size);
      $("#pagination").twbsPagination("changeTotalPages", totalPages, 1);

    }
    let rows = [];
    //console.log(snapshot.docs);

    last = Math.ceil(total / size);
    $("#total").html(total);

    snapshot.docs.forEach((doc, index) => {
      const start = (page - 1) * size;
      const end = (page * size) - 1;
      if (index >= start && index <= end) {
        const row = { index: index + 1, id: doc.id, ...doc.data() };
        rows.push(row);
      }


    });
    const temp = Handlebars.compile($("#temp_posts").html());
    $("#div_posts").html(temp(rows));
  }

  $("#btn-insert").on("click", function () {
    if (!sessionStorage.getItem("email")) {
      location.href = "/users/login";
      sessionStorage.setItem("target", "/posts/insert");
    } else {
      location.href = "/posts/insert";
    }
  });

</script>